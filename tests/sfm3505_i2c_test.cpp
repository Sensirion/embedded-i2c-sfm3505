/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.3.3
 * Product:       sfm3505
 * Model-Version: 1.0.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sfm3505_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

void print_byte_array(uint8_t* array, uint16_t len) {
    uint16_t i = 0;
    printf("0x");
    for (; i < len; i++) {
        printf("%02x", array[i]);
    }
}

TEST_GROUP (SFM3505_Tests) {
    void setup() {
        sfm3505_init(0x2E);
    }
};

TEST (SFM3505_Tests, test_configure_averaging1) {
    int16_t local_error = 0;
    local_error = sfm3505_configure_averaging(2);
    CHECK_EQUAL_ZERO_TEXT(local_error, "configure_averaging");
}

TEST (SFM3505_Tests, test_read_product_identifier1) {
    int16_t local_error = 0;
    uint32_t product_identifier = 0;
    uint64_t serial_number = 0;
    local_error =
        sfm3505_read_product_identifier(&product_identifier, &serial_number);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_identifier");
    printf("product_identifier: %u ", product_identifier);
    printf("serial_number: %" PRIx64 "\n", serial_number);
}

TEST (SFM3505_Tests, test_start_continuous_measurement1) {
    int16_t local_error = 0;
    uint8_t all_flow_bytes_raw[6] = {0};
    uint32_t a_air_flow_raw = 0;
    uint32_t a_o2_flow_raw = 0;
    uint8_t air_flow_bytes_raw[4] = {0};
    local_error = sfm3505_start_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_continuous_measurement");
    local_error = sfm3505_read_all_measurement_data_raw(all_flow_bytes_raw, 6);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_all_measurement_data_raw");
    printf("all_flow_bytes_raw: ");
    print_byte_array(all_flow_bytes_raw, 6);
    printf("\n");
    local_error = sfm3505_read_all_measurement_data_no_float(&a_air_flow_raw,
                                                             &a_o2_flow_raw);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_all_measurement_data_no_float");
    printf("a_air_flow_raw: %u ", a_air_flow_raw);
    printf("a_o2_flow_raw: %u\n", a_o2_flow_raw);
    local_error = sfm3505_read_air_measurement_data_raw(air_flow_bytes_raw, 4);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_air_measurement_data_raw");
    printf("air_flow_bytes_raw: ");
    print_byte_array(air_flow_bytes_raw, 4);
    printf("\n");
    local_error = sfm3505_read_air_measurement_data_no_float(&a_air_flow_raw);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_air_measurement_data_no_float");
    printf("a_air_flow_raw: %u\n", a_air_flow_raw);
    local_error = sfm3505_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM3505_Tests, test_start_continuous_measurement_with_filter1) {
    int16_t local_error = 0;
    uint8_t all_flow_bytes_raw[6] = {0};
    uint32_t a_air_flow_raw = 0;
    uint32_t a_o2_flow_raw = 0;
    uint8_t air_flow_bytes_raw[4] = {0};
    local_error = sfm3505_start_continuous_measurement_with_filter(50961);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_continuous_measurement_with_filter");
    local_error = sfm3505_read_all_measurement_data_raw(all_flow_bytes_raw, 6);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_all_measurement_data_raw");
    printf("all_flow_bytes_raw: ");
    print_byte_array(all_flow_bytes_raw, 6);
    printf("\n");
    local_error = sfm3505_read_all_measurement_data_no_float(&a_air_flow_raw,
                                                             &a_o2_flow_raw);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_all_measurement_data_no_float");
    printf("a_air_flow_raw: %u ", a_air_flow_raw);
    printf("a_o2_flow_raw: %u\n", a_o2_flow_raw);
    local_error = sfm3505_read_air_measurement_data_raw(air_flow_bytes_raw, 4);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_air_measurement_data_raw");
    printf("air_flow_bytes_raw: ");
    print_byte_array(air_flow_bytes_raw, 4);
    printf("\n");
    local_error = sfm3505_read_air_measurement_data_no_float(&a_air_flow_raw);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_air_measurement_data_no_float");
    printf("a_air_flow_raw: %u\n", a_air_flow_raw);
    local_error = sfm3505_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}
