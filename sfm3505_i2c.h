/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.3.3
 * Product:       sfm3505
 * Model-Version: 1.0.0
 */
/*
 * Copyright (c) 2025, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SFM3505_I2C_H
#define SFM3505_I2C_H

#ifdef __cplusplus
extern "C" {
#endif

#include "sensirion_config.h"
#define SFM3505_I2C_ADDR_2E 0x2e

typedef enum {
    SFM3505_START_CONTINUOUS_MEASUREMENT_CMD_ID = 0x3603,
    SFM3505_START_CONTINUOUS_MEASUREMENT_WITH_FILTER_CMD_ID = 0x3603,
    SFM3505_STOP_CONTINUOUS_MEASUREMENT_CMD_ID = 0x3ff9,
    SFM3505_CONFIGURE_AVERAGING_CMD_ID = 0x364d,
    SFM3505_READ_PRODUCT_IDENTIFIER_CMD_ID = 0x365b,
} SFM3505_CMD_ID;

typedef enum {
    SFM3505_FILTER_OPTIONS_T63_1MS = 33601,
    SFM3505_FILTER_OPTIONS_T63_3MS = 50961,
    SFM3505_FILTER_OPTIONS_T63_5MS = 56105,
    SFM3505_FILTER_OPTIONS_T63_10MS = 60527,
} sfm3505_filter_options;

/**
 * @brief Initialize i2c address of driver
 *
 * @param[in] i2c_address Used i2c address
 *
 */
void sfm3505_init(uint8_t i2c_address);

/**
 * @brief sfm3505_signal_o2_flow_raw
 *
 * @param[in] flow_bytes_raw
 *
 * @return This raw signal represents the measured O2 flow as returned by the
 * sensor. The result needs to be scaled to obtain slm.
 */
uint32_t sfm3505_signal_o2_flow_raw(const uint8_t* flow_bytes_raw);

/**
 * @brief sfm3505_signal_air_flow_raw
 *
 * @param[in] flow_bytes_raw
 *
 * @return This raw signal represents the measured Air flow as returned by the
 * sensor. The result needs to be scaled to obtain slm.
 */
uint32_t sfm3505_signal_air_flow_raw(const uint8_t* flow_bytes_raw);

/**
 * @brief Read measurement data without scaling.
 *
 * @param[out] a_air_flow_raw This raw signal represents the measured Air flow
 * as returned by the sensor. The result needs to be scaled to obtain slm.
 * @param[out] a_o2_flow_raw This raw signal represents the measured O2 flow as
 * returned by the sensor. The result needs to be scaled to obtain slm.
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_read_all_measurement_data_no_float(uint32_t* a_air_flow_raw,
                                                   uint32_t* a_o2_flow_raw);

/**
 * @brief Read only the air flow measurement data and does not apply scaling.
 *
 * @param[out] a_air_flow_raw This raw signal represents the measured Air flow
 * as returned by the sensor. The result needs to be scaled to obtain slm.
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_read_air_measurement_data_no_float(uint32_t* a_air_flow_raw);

/**
 * @brief Start continuous measurement
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_start_continuous_measurement();

/**
 * @brief Start continuous measurement with custom filter
 *
 * @param[in] a_filter Low pass filter configuration.
 *
 * @return error_code 0 on success, an error code otherwise.
 *
 * Example:
 * --------
 *
 * @code{.c}
 *
 *     int16_t local_error = 0;
 *     local_error = sfm3505_start_continuous_measurement_with_filter(50961);
 *     if (local_error != NO_ERROR) {
 *         return local_error;
 *     }
 *
 * @endcode
 *
 */
int16_t sfm3505_start_continuous_measurement_with_filter(uint16_t a_filter);

/**
 * @brief Read out the full data from the sensor.
 *
 * @param[out] all_flow_bytes_raw Air-calibrated flow signal and O2-calibrated
 * flow signal read from the sensor as Bytes
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_read_all_measurement_data_raw(uint8_t* all_flow_bytes_raw,
                                              uint16_t all_flow_bytes_raw_size);

/**
 * @brief Read out the air flow from the sensor.
 *
 * @param[out] air_flow_bytes_raw Air-calibrated flow signal read from the
 * sensor as Bytes.
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_read_air_measurement_data_raw(uint8_t* air_flow_bytes_raw,
                                              uint16_t air_flow_bytes_raw_size);

/**
 * @brief This transfer stops the continuous measurement and puts the sensor in
 * idle mode.
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_stop_continuous_measurement();

/**
 * @brief Configures the sensor's averaging mode.
 *
 * @param[in] average_window Average window configuration value.
 *
 * @return error_code 0 on success, an error code otherwise.
 *
 * Example:
 * --------
 *
 * @code{.c}
 *
 *     int16_t local_error = 0;
 *     local_error = sfm3505_configure_averaging(2);
 *     if (local_error != NO_ERROR) {
 *         return local_error;
 *     }
 *
 * @endcode
 *
 */
int16_t sfm3505_configure_averaging(uint16_t average_window);

/**
 * @brief Reads the product identifier and serial number
 *
 * @param[out] product_identifier 32-bit unique product and revision number
 * @param[out] serial_number 64 bit unique serial number of the device
 *
 * @return error_code 0 on success, an error code otherwise.
 */
int16_t sfm3505_read_product_identifier(uint32_t* product_identifier,
                                        uint64_t* serial_number);

#ifdef __cplusplus
}
#endif
#endif  // SFM3505_I2C_H
